#!/usr/bin/env python3

import subprocess
import requests
import schedule
import time
import logging
import signal
import sys
from datetime import datetime
import re
from requests.adapters import HTTPAdapter
from urllib3.util.retry import Retry

# Logging configuration
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# Discord webhook URL and related variables
WEBHOOK_URL = "https://discord.com/api/v10/webhooks/123123123123/qgqgdqgqeg"
SERVICE_CK = "corekeeper"  # CoreKeeper service name
SERVICE_WC = "watchcore"  # WatchCore service name
TARGET_STRING = "Game ID:"  # String to find the game ID in the logs
WATCHCORE_STATUS_MESSAGE = "ID:"  # String to find in the WatchCore status message
MESSAGE_ID = None  # Initialize the Discord message ID
LAST_STATUS_MESSAGE = None  # Last server status message

# HTTP session with retry strategy for network robustness
RETRY_STRATEGY = Retry(
    total=3,
    backoff_factor=1,
    status_forcelist=[429, 500, 502, 503, 504],
    allowed_methods=["HEAD", "GET", "POST", "PATCH"]
)
HTTP_ADAPTER = HTTPAdapter(max_retries=RETRY_STRATEGY)
SESSION = requests.Session()
SESSION.mount("http://", HTTP_ADAPTER)
SESSION.mount("https://", HTTP_ADAPTER)
REQUEST_TIMEOUT = 10  # seconds

# Function to initialize the message ID
def initialize_message_id():
    global MESSAGE_ID
    if MESSAGE_ID is None:
        MESSAGE_ID = get_last_message_id_from_journal()
        if MESSAGE_ID:
            logging.info(f"Initial message ID set: {MESSAGE_ID}")
        else:
            logging.info("Could not find the initial message ID.")

# Function to get the last message ID from journalctl
def get_last_message_id_from_journal():
    try:
        # Extract the last message ID from the 'watchcore' service logs
        process = subprocess.run(
            ["journalctl", "-u", SERVICE_WC, "-n", "20", "--grep", WATCHCORE_STATUS_MESSAGE],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        if process.returncode == 0 and process.stdout:
            for line in process.stdout.splitlines():
                message_id = extract_message_id_from_log(line)
                if message_id:
                    return message_id
        return None
    except Exception as e:
        logging.error(f"Error occurred while extracting ID from journalctl: {e}", exc_info=True)
        return None

# Function to extract the message ID from a log line
def extract_message_id_from_log(log_line):
    match = re.search(r"ID:\s*(\d+)", log_line)
    if match:
        return match.group(1)
    return None

# Function to send or update the Discord message
def send_or_update_discord_message(content):
    """Send a new Discord message or update the existing one.

    Returns True if the operation succeeded, False otherwise.
    """
    global MESSAGE_ID

    data = {"content": content}

    try:
        # If the existing message ID is invalid, create a new message
        if MESSAGE_ID and not is_message_id_valid(MESSAGE_ID):
            logging.warning("MESSAGE_ID is invalid. Creating a new message.")
            MESSAGE_ID = None

        # If the message already exists, update it using PATCH, otherwise create a new one
        if MESSAGE_ID:
            response = SESSION.patch(
                f"{WEBHOOK_URL}/messages/{MESSAGE_ID}", json=data, timeout=REQUEST_TIMEOUT
            )
        else:
            response = SESSION.post(
                f"{WEBHOOK_URL}?wait=1", json=data, timeout=REQUEST_TIMEOUT
            )

        if response.status_code in {200, 204}:  # Handle successful responses
            if not MESSAGE_ID:
                message_data = response.json()
                MESSAGE_ID = message_data.get("id")
                logging.info(f"Message created successfully, ID: {MESSAGE_ID}")
            else:
                logging.info("Message updated successfully")
            return True
        else:
            logging.warning(
                f"Message processing failed: {response.status_code}, {response.text}"
            )
            return False
    except Exception as e:
        logging.error(f"Error occurred while processing the message: {e}", exc_info=True)
        return False

# Function to check if the message ID is valid
def is_message_id_valid(message_id):
    try:
        response = SESSION.get(
            f"{WEBHOOK_URL}/messages/{message_id}", timeout=REQUEST_TIMEOUT
        )
        return response.status_code == 200
    except Exception as e:
        logging.error(
            f"Error occurred while checking message validity: {e}", exc_info=True
        )
        return False

# Function to check the CoreKeeper service status and update the Discord message
def check_service_status():
    global LAST_STATUS_MESSAGE

    try:
        # Check the CoreKeeper service status using systemctl
        process = subprocess.run(
            ["systemctl", "is-active", SERVICE_CK],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )

        # Set the message based on the CoreKeeper status
        if process.returncode == 0 and process.stdout.strip() == "active":
            # When CoreKeeper server is active
            last_start_time = get_last_start_time()
            server_id = get_server_id() or "Unknown"
            corekeeper_status = f"{SERVICE_CK} server is active."
        else:
            # When CoreKeeper server is inactive
            last_start_time = "Unknown"
            server_id = "Unknown"
            corekeeper_status = f"{SERVICE_CK} server is inactive."

        # Watchcore status is always running
        watchcore_status = "Watchcore is running."

        # Compose the new status message
        new_status_message = f"""**Server ID**
```{server_id}``` 
**Server Status**
```{corekeeper_status}``` 
**Last Server Start Time**
```{last_start_time}``` 
**Watchcore Status**
```{watchcore_status}```"""

        # Only update Discord if the message has changed and sending succeeds
        if new_status_message != LAST_STATUS_MESSAGE:
            if send_or_update_discord_message(new_status_message):
                LAST_STATUS_MESSAGE = new_status_message
            else:
                logging.warning(
                    "Failed to send status message. Will retry on next check."
                )
    except Exception as e:
        logging.error(f"Error occurred while checking server status: {e}", exc_info=True)

# Function to get the last start time of the server
def get_last_start_time():
    try:
        process = subprocess.run(
            ["journalctl", "-u", SERVICE_CK, "--reverse", "-n", "10", "--grep", TARGET_STRING],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        if process.returncode == 0 and process.stdout:
            for line in process.stdout.splitlines():
                if TARGET_STRING in line:
                    timestamp_str = " ".join(line.split()[:3])
                    full_timestamp = datetime.strptime(f"{datetime.now().year} {timestamp_str}", "%Y %b %d %H:%M:%S")
                    return full_timestamp.strftime("%Y-%m-%d %H:%M:%S")
        return "Unknown"
    except Exception as e:
        logging.error(f"Error occurred while extracting time: {str(e)}", exc_info=True)
        return "Error extracting time"

# Function to get the server ID
def get_server_id():
    try:
        process = subprocess.run(
            ["journalctl", "-u", SERVICE_CK, "--reverse", "-n", "10"],
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        for line in process.stdout.splitlines():
            if TARGET_STRING in line:
                return line.split(TARGET_STRING, 1)[1].strip()
        return None
    except Exception as e:
        logging.error(f"Error occurred while extracting server ID: {str(e)}", exc_info=True)
        return None

# Function to handle SIGTERM signal and send a shutdown message to Discord
def signal_handler(sig, frame):
    logging.info("SIGTERM signal received, shutting down Watchcore.")
    if MESSAGE_ID:
        send_or_update_discord_message("**Watchcore Status**\n```Watchcore has been shut down.```")
    sys.exit(0)

# Watchdog function that periodically checks server status and updates the message
def watchdog():
    logging.info("Watchdog is running.")
    initialize_message_id()  # Initialize the message ID
    signal.signal(signal.SIGTERM, signal_handler)  # Set the SIGTERM signal handler

    # Set the scheduler to check the server status every 5 seconds
    schedule.every(5).seconds.do(check_service_status)

    while True:
        try:
            schedule.run_pending()
            time.sleep(5)  # Wait for 5 seconds before checking again
        except Exception as e:
            logging.error(f"Error occurred: {e}", exc_info=True)
            time.sleep(5)

# Run the program
if __name__ == "__main__":
    watchdog()
